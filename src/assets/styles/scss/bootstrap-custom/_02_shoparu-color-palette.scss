// Utility Color Classes

$shoparu: (
    // Brand colors
    "base": #3A3A3A,
    "link": #00D2FF,
    "hover": #FF82A5,
    "button-fill": #00ACE7,
    "button-text": #00ACE7,
    "cats-header": #5ECCC8,
    "disable": #ACACAC,
    "disable-bg": #EFEFEF,
    "border": #D9D9D9,
    "icons": #E4AFE4,
    "muted": #767474,
    "green":#049888,

    // b&w
    "black": #000000,
    "white": #FFFFFF,
    "transparent": transparent,
    // social
    "facebook": #3B5998,
    "linkedin": #007BB5,
    "google": #E02F2F,
    "twitter": #00aced,
);

$colors: (
    "shoparu": $shoparu
) !default;

$fixed-colors: (
    "shoparu": $shoparu
) !default;

// Color Classes

@each $color_name, $color in $colors {
  @each $color_type, $color_value in $color {
    @if $color_type == "base" {
      .bg-#{$color_name} {
        background-color: $color_value;
      }
      .#{$color_name}-text {
        color: $color_value;
      }
    } @else if $color_name != "shoparu" {
      .bg-#{$color_name}.#{$color_type} {
        background-color: $color_value;
      }
      .#{$color_name}-text.text-#{$color_type} {
        color: $color_value;
      }
    }
  }
}

// Shade classes
@each $color, $color_value in $shoparu {
  .bg-#{$color} {
    background-color: $color_value !important;
  }
  .#{$color}-text {
    color: $color_value!important;
  }
}

// usage: color("name_of_color", "type_of_color")
// to avoid to repeating map-get($colors, ...)

@function color-maker($color, $type) {
  @if map-has-key($fixed-colors, $color) {
    $curr_color: map-get($fixed-colors, $color);
    @if map-has-key($curr_color, $type) {
      @return map-get($curr_color, $type);
    }
  }
  @warn "Unknown `#{name}` in $colors.";
  @return null;
}
